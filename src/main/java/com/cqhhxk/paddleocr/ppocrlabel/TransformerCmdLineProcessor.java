package com.cqhhxk.paddleocr.ppocrlabel;

import com.cqhhxk.utils.FileUtils;
import com.cqhhxk.utils.StringUtils;
import jakarta.validation.constraints.NotNull;

import java.io.File;

/**
 * PPOCRLabel Transformer CmdLine Processor
 * @author george
 */
public class TransformerCmdLineProcessor {

    public static void main(String[] args) {
        TransformerArgs transformerArgs = parseArgs(args);

        if (validateTransformerArgs(transformerArgs)) {
            doTransform(transformerArgs);
        } else {
            printUsage();
        }
    }

    /**
     * Parse command line arguments
     * @param args Arguments
     * @return TransformerArgs
     */
    private static @NotNull TransformerArgs parseArgs(@NotNull String[] args) {
        TransformerArgs transformerArgs = new TransformerArgs();
        for (int i = 0; i < args.length - 1; i++) {
            if ("--image-dir".equals(args[i])) {
                transformerArgs.setCroppedImageDir(args[i+1]);
            } else if ("--label-file".equals(args[i])) {
                transformerArgs.setLabelFile(args[i+1]);
            } else if ("--width".equals(args[i])) {
                transformerArgs.setWidth(Integer.parseInt(args[i+1]));
            } else if ("--height".equals(args[i])) {
                transformerArgs.setHeight(Integer.parseInt(args[i+1]));
            } else if ("--output-dir".equals(args[i])) {
                transformerArgs.setOutputDir(args[i+1]);
            }
        }
        return transformerArgs;
    }

    /**
     * Check if a TransformerArgs variable valid
     * @param args TransformerArgs
     * @return True if valid, or false if not
     */
    private static boolean validateTransformerArgs(@NotNull TransformerArgs args) {
        return !StringUtils.isBlank(args.getCroppedImageDir()) &&
                !StringUtils.isBlank(args.getLabelFile()) &&
                (
                        (args.getWidth() == 0 &&
                                args.getHeight() == 0 &&
                                StringUtils.isBlank(args.getOutputDir())) ||
                        (args.getWidth() > 0 &&
                                args.getHeight() > 0 &&
                                !StringUtils.isBlank(args.getOutputDir()) &&
                                validateOutputDir(args.getCroppedImageDir(), args.getOutputDir()))
                );
    }

    /**
     * Check if parameter --output-dir valid
     * @param imageDir @See TransformerArgs.croppedImageDir
     * @param outputDir @See TransformerArgs.outputDir
     * @return True if valid, or false if not
     */
    private static boolean validateOutputDir(@NotNull String imageDir, @NotNull String outputDir) {
        if (FileUtils.samePath(imageDir, outputDir)) {
            System.out.println("Please set --output-dir to another folder to avoid overwriting original images");
            return false;
        }

        File f = new File(outputDir);
        boolean directoryCreated = f.exists() || f.mkdirs();
        if (!directoryCreated) {
            System.out.println(String.format("Can not create directory %s", outputDir));
            return false;
        }

        return true;
    }

    /**
     * Do transformation
     * @param args TransformerArgs
     */
    private static void doTransform(@NotNull TransformerArgs args) {
        new Transformer(args).transform();
    }

    /**
     * Print the usage of this program
     */
    private static void printUsage() {
        String path = TransformerCmdLineProcessor.class.getProtectionDomain().getCodeSource().getLocation().getPath();
        String jarName = FileUtils.extractFilename(path, true);
        System.out.println("Utility to transform label file generated by PPOCRLabel to suite cropped images");
        System.out.println();
        System.out.println("Usage:");
        System.out.println("  java -jar " + jarName + " <options>");
        System.out.println();
        System.out.println("Options:");
        System.out.println("  --image-dir   (Required) Folder contains PPOCRLabel generated cropped-images");
        System.out.println("  --label-file  (Required) Original PPOCRLabel label file");
        System.out.println("  --width       (Optional) New canvas width (px) if needs to extend image canvas");
        System.out.println("  --height      (Optional) New canvas height (px) if needs to extend image canvas");
        System.out.println("  --output-dir  (Optional) Folder to save modified images if needs to extend image canvas");
        System.out.println();
        System.out.println("  Note: If needs to extend image canvas while transforming label file, all of --width, --height and --output-dir should be provided.");
        System.out.println();
    }
}
